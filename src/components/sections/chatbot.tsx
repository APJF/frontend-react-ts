"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import {
  Send,
  Bot,
  User,
  Loader2,
  Plus,
  MessageSquare,
  Trash2,
  MoreHorizontal,
  Search,
  Settings,
  Menu,
  X,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

interface Message {
  id: string
  content: string
  role: "user" | "assistant"
  timestamp: Date
  isTyping?: boolean
}

interface ChatSession {
  id: string
  title: string
  lastMessage: string
  timestamp: Date
  messages: Message[]
}

const initialMessage: Message = {
  id: "1",
  content:
    "Xin ch√†o! T√¥i l√† AI Assistant c·ªßa trung t√¢m ti·∫øng Nh·∫≠t. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc, l·ªãch h·ªçc, v√† tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi v·ªÅ vi·ªác h·ªçc ti·∫øng Nh·∫≠t. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay? üáØüáµ",
  role: "assistant",
  timestamp: new Date(),
}

const sampleChatSessions: ChatSession[] = [
  {
    id: "1",
    title: "T∆∞ v·∫•n kh√≥a h·ªçc N5",
    lastMessage: "C·∫£m ∆°n b·∫°n ƒë√£ t∆∞ v·∫•n!",
    timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago
    messages: [initialMessage],
  },
  {
    id: "2",
    title: "L·ªãch h·ªçc v√† gi√° c·∫£",
    lastMessage: "T√¥i s·∫Ω c√¢n nh·∫Øc v√† li√™n h·ªá l·∫°i",
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago
    messages: [initialMessage],
  },
  {
    id: "3",
    title: "Ph∆∞∆°ng ph√°p h·ªçc hi·ªáu qu·∫£",
    lastMessage: "C√≥ th·ªÉ gi·∫£i th√≠ch th√™m v·ªÅ Kanji kh√¥ng?",
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago
    messages: [initialMessage],
  },
]

export default function Chatbot() {
  const [chatSessions, setChatSessions] = useState<ChatSession[]>(sampleChatSessions)
  const [currentChatId, setCurrentChatId] = useState<string>("1")
  const [inputValue, setInputValue] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [sidebarOpen, setSidebarOpen] = useState(true)
  const [searchQuery, setSearchQuery] = useState("")
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  const currentChat = chatSessions.find((chat) => chat.id === currentChatId)
  const currentMessages = currentChat?.messages || [initialMessage]

  const filteredChatSessions = chatSessions.filter(
    (chat) =>
      chat.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      chat.lastMessage.toLowerCase().includes(searchQuery.toLowerCase()),
  )

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [currentMessages])

  const generateAIResponse = async (userMessage: string): Promise<string> => {
    await new Promise((resolve) => setTimeout(resolve, 1000 + Math.random() * 2000))

    const responses = {
      greeting: [
        "Ch√†o b·∫°n! T√¥i r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n v·ªÅ vi·ªác h·ªçc ti·∫øng Nh·∫≠t. üéå",
        "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc ti·∫øng Nh·∫≠t c·ªßa ch√∫ng t√¥i. ‚ú®",
      ],
      course: [
        "Ch√∫ng t√¥i c√≥ c√°c kh√≥a h·ªçc t·ª´ N5 ƒë·∫øn N1, ph√π h·ª£p v·ªõi m·ªçi tr√¨nh ƒë·ªô. Kh√≥a N5 d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v·ªõi 800 t·ª´ v·ª±ng c∆° b·∫£n v√† 45 ng·ªØ ph√°p. B·∫°n mu·ªën t√¨m hi·ªÉu kh√≥a n√†o c·ª• th·ªÉ? üìö",
        "C√°c kh√≥a h·ªçc c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø theo chu·∫©n JLPT v·ªõi gi√°o vi√™n b·∫£n ng·ªØ. C√≥ kh√≥a c∆° b·∫£n (N5-N4), trung c·∫•p (N3-N2) v√† n√¢ng cao (N1). B·∫°n ƒëang ·ªü tr√¨nh ƒë·ªô n√†o? üéØ",
      ],
      default: [
        "ƒê√≥ l√† m·ªôt c√¢u h·ªèi hay! T√¥i s·∫Ω c·ªë g·∫Øng tr·∫£ l·ªùi t·ªët nh·∫•t c√≥ th·ªÉ. B·∫°n c√≥ th·ªÉ cung c·∫•p th√™m chi ti·∫øt ƒë·ªÉ t√¥i h·ªó tr·ª£ ch√≠nh x√°c h∆°n kh√¥ng? ü§î",
        "C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi. T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt v·ªÅ ƒëi·ªÅu n√†y. B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi t∆∞ v·∫•n vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt h∆°n. üìû",
      ],
    }

    const lowerMessage = userMessage.toLowerCase()

    if (lowerMessage.includes("ch√†o") || lowerMessage.includes("hello") || lowerMessage.includes("hi")) {
      return responses.greeting[Math.floor(Math.random() * responses.greeting.length)]
    } else if (
      lowerMessage.includes("kh√≥a h·ªçc") ||
      lowerMessage.includes("course") ||
      lowerMessage.includes("n5") ||
      lowerMessage.includes("n4") ||
      lowerMessage.includes("jlpt")
    ) {
      return responses.course[Math.floor(Math.random() * responses.course.length)]
    } else {
      return responses.default[Math.floor(Math.random() * responses.default.length)]
    }
  }

  const handleSendMessage = async (content: string) => {
    if (!content.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: content.trim(),
      role: "user",
      timestamp: new Date(),
    }

    // Update current chat with new message
    setChatSessions((prev) =>
      prev.map((chat) =>
        chat.id === currentChatId
          ? {
              ...chat,
              messages: [...chat.messages, userMessage],
              lastMessage: content.trim(),
              timestamp: new Date(),
            }
          : chat,
      ),
    )

    setInputValue("")
    setIsLoading(true)

    // Add typing indicator
    const typingMessage: Message = {
      id: "typing",
      content: "",
      role: "assistant",
      timestamp: new Date(),
      isTyping: true,
    }

    setChatSessions((prev) =>
      prev.map((chat) => (chat.id === currentChatId ? { ...chat, messages: [...chat.messages, typingMessage] } : chat)),
    )

    try {
      const aiResponse = await generateAIResponse(content)

      // Remove typing indicator and add real response
      setChatSessions((prev) =>
        prev.map((chat) =>
          chat.id === currentChatId
            ? {
                ...chat,
                messages: chat.messages
                  .filter((msg) => msg.id !== "typing")
                  .concat({
                    id: Date.now().toString(),
                    content: aiResponse,
                    role: "assistant",
                    timestamp: new Date(),
                  }),
                lastMessage: aiResponse.slice(0, 50) + "...",
                timestamp: new Date(),
              }
            : chat,
        ),
      )
    } catch (error) {
      setChatSessions((prev) =>
        prev.map((chat) =>
          chat.id === currentChatId
            ? {
                ...chat,
                messages: chat.messages
                  .filter((msg) => msg.id !== "typing")
                  .concat({
                    id: Date.now().toString(),
                    content: "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau. üòÖ",
                    role: "assistant",
                    timestamp: new Date(),
                  }),
              }
            : chat,
        ),
      )
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage(inputValue)
    }
  }

  const createNewChat = () => {
    const newChat: ChatSession = {
      id: Date.now().toString(),
      title: "Cu·ªôc tr√≤ chuy·ªán m·ªõi",
      lastMessage: "B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán...",
      timestamp: new Date(),
      messages: [initialMessage],
    }
    setChatSessions((prev) => [newChat, ...prev])
    setCurrentChatId(newChat.id)
  }

  const deleteChat = (chatId: string) => {
    setChatSessions((prev) => prev.filter((chat) => chat.id !== chatId))
    if (currentChatId === chatId) {
      const remainingChats = chatSessions.filter((chat) => chat.id !== chatId)
      if (remainingChats.length > 0) {
        setCurrentChatId(remainingChats[0].id)
      } else {
        createNewChat()
      }
    }
  }

  const formatTime = (date: Date) => {
    const now = new Date()
    const diff = now.getTime() - date.getTime()
    const minutes = Math.floor(diff / (1000 * 60))
    const hours = Math.floor(diff / (1000 * 60 * 60))
    const days = Math.floor(diff / (1000 * 60 * 60 * 24))

    if (minutes < 1) return "V·ª´a xong"
    if (minutes < 60) return `${minutes} ph√∫t tr∆∞·ªõc`
    if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`
    if (days < 7) return `${days} ng√†y tr∆∞·ªõc`
    return date.toLocaleDateString("vi-VN")
  }

  return (
    <div className="h-screen bg-white flex">
      {/* Sidebar */}
      <div
        className={`${sidebarOpen ? "w-80" : "w-0"} transition-all duration-300 border-r border-gray-200 flex flex-col overflow-hidden`}
      >
        {/* Sidebar Header */}
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold text-gray-900">L·ªãch s·ª≠ chat</h2>
            <Button variant="ghost" size="sm" onClick={() => setSidebarOpen(false)} className="lg:hidden">
              <X className="h-4 w-4" />
            </Button>
          </div>

          <Button onClick={createNewChat} className="w-full bg-red-600 hover:bg-red-700 text-white mb-3">
            <Plus className="h-4 w-4 mr-2" />
            T·∫°o ƒëo·∫°n chat m·ªõi
          </Button>

          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              placeholder="T√¨m ki·∫øm cu·ªôc tr√≤ chuy·ªán..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 text-sm"
            />
          </div>
        </div>

        {/* Chat Sessions List */}
        <ScrollArea className="flex-1">
          <div className="p-2">
            {filteredChatSessions.map((chat) => (
              <div
                key={chat.id}
                className={`p-3 rounded-lg cursor-pointer mb-2 group hover:bg-gray-50 transition-colors ${
                  currentChatId === chat.id ? "bg-red-50 border border-red-200" : ""
                }`}
                onClick={() => setCurrentChatId(chat.id)}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <MessageSquare className="h-4 w-4 text-gray-400 flex-shrink-0" />
                      <h3 className="text-sm font-medium text-gray-900 truncate">{chat.title}</h3>
                    </div>
                    <p className="text-xs text-gray-500 truncate mb-1">{chat.lastMessage}</p>
                    <p className="text-xs text-gray-400">{formatTime(chat.timestamp)}</p>
                  </div>

                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0"
                      >
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    {/* <DropdownMenuContent align="end">
                      <DropdownMenuItem
                        onClick={(e) => {
                          e.stopPropagation()
                          deleteChat(chat.id)
                        }}
                        className="text-red-600"
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        X√≥a
                      </DropdownMenuItem>
                    </DropdownMenuContent> */}
                  </DropdownMenu>
                </div>
              </div>
            ))}
          </div>
        </ScrollArea>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Chat Header */}
        <div className="p-4 border-b border-gray-200 bg-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              {!sidebarOpen && (
                <Button variant="ghost" size="sm" onClick={() => setSidebarOpen(true)}>
                  <Menu className="h-4 w-4" />
                </Button>
              )}
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 rounded-full bg-red-600 flex items-center justify-center">
                  <Bot className="h-4 w-4 text-white" />
                </div>
                <div>
                  <h1 className="text-lg font-semibold text-gray-900">AI Assistant</h1>
                  <div className="flex items-center gap-1 text-sm text-gray-500">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>ƒêang ho·∫°t ƒë·ªông</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex items-center gap-2">
              <Badge className="bg-red-100 text-red-700 hover:bg-red-100">üáØüáµ Ti·∫øng Nh·∫≠t</Badge>
              <Button variant="ghost" size="sm">
                <Settings className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-hidden">
          <ScrollArea className="h-full">
            <div className="p-4 space-y-4 max-w-4xl mx-auto">
              {currentMessages.map((message) => (
                <div
                  key={message.id}
                  className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}
                >
                  {message.role === "assistant" && (
                    <div className="w-8 h-8 rounded-full bg-red-600 flex items-center justify-center flex-shrink-0">
                      <Bot className="h-4 w-4 text-white" />
                    </div>
                  )}

                  <div
                    className={`max-w-[70%] rounded-2xl px-4 py-3 ${
                      message.role === "user" ? "bg-red-600 text-white" : "bg-gray-100 text-gray-900"
                    }`}
                  >
                    {message.isTyping ? (
                      <div className="flex items-center gap-2">
                        <Loader2 className="h-4 w-4 animate-spin text-red-600" />
                        <span className="text-sm text-red-600">ƒêang tr·∫£ l·ªùi...</span>
                      </div>
                    ) : (
                      <>
                        <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                        <p className="text-xs opacity-70 mt-2">
                          {message.timestamp.toLocaleTimeString("vi-VN", {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                        </p>
                      </>
                    )}
                  </div>

                  {message.role === "user" && (
                    <div className="w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center flex-shrink-0">
                      <User className="h-4 w-4 text-white" />
                    </div>
                  )}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>
        </div>

        {/* Input */}
        <div className="p-4 border-t border-gray-200 bg-white">
          <div className="max-w-4xl mx-auto">
            <div className="flex gap-3 items-end">
              <div className="flex-1 relative">
                <Input
                  ref={inputRef}
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                  disabled={isLoading}
                  className="pr-12 py-3 rounded-2xl border-gray-300 focus:border-red-400 focus:ring-red-400"
                />
                <Button
                  onClick={() => handleSendMessage(inputValue)}
                  disabled={!inputValue.trim() || isLoading}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-red-600 hover:bg-red-700 rounded-full h-8 w-8 p-0"
                >
                  {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
                </Button>
              </div>
            </div>
            <p className="text-xs text-gray-500 mt-2 text-center">
              AI c√≥ th·ªÉ m·∫Øc l·ªói. Vui l√≤ng ki·ªÉm tra th√¥ng tin quan tr·ªçng.
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}
